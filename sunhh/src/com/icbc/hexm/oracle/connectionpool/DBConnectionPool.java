package com.icbc.hexm.oracle.connectionpool;

import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Date;
import java.util.Enumeration;
import java.util.Vector;

import com.icbc.hexm.util.Log4jUtil;
import com.icbc.hexm.util.MyUtil;

/**
 * 此内部类定义了一个连接池.它能够根据要求创建新连接,直到预定的最 大连接数为止.在返回连接给客户程序之前,它能够验证连接的有效性.
 */

public class DBConnectionPool {
	// private int checkedOut;
	private Vector freeConnections = new Vector();
	private int maxConn;
	private String name;
	private String password;
	private String URL;
	private String user;
	//private PrintWriter log;

	/**
	 * 创建新的连接池
	 * 
	 * @param name
	 *            连接池名字
	 * @param URL
	 *            数据库的JDBC URL
	 * @param user
	 *            数据库帐号,或 null
	 * @param password
	 *            密码,或 null
	 * @param maxConn
	 *            此连接池允许建立的最大连接数
	 * @param log 
	 */
	public DBConnectionPool(String name, String URL, String user, String password, int maxConn) {
		this.name = name;
		this.URL = URL;
		this.user = user;
		this.password = password;
		this.maxConn = maxConn;
		//this.log = log;
	}

	/**
	 * 将不再使用的连接返回给连接池
	 * 
	 * @param con
	 *            客户程序释放的连接
	 */
	public synchronized void freeConnection(Connection con) {
		// 将指定连接加入到向量末尾
		try {
			if (con.isClosed()) {
				System.out.println("before freeConnection con is closed");
			}
			freeConnections.addElement(con);
			Connection contest = (Connection) freeConnections.lastElement();
			if (contest.isClosed()) {
				System.out.println("after freeConnection contest is closed");
			}
			notifyAll();
		} catch (SQLException e) {
			System.out.println(e);
		}
	}

	/**
	 * 从连接池获得一个可用连接.如没有空闲的连接且当前连接数小于最大连接 数限制,则创建新连接.如原来登记为可用的连接不再有效,则从向量删除之,
	 * 然后递归调用自己以尝试新的可用连接.
	 * @throws SQLException 
	 */
	public synchronized Connection getConnection() throws SQLException {
		Connection con = null;
		if (freeConnections.size() > 0) {
			// 获取向量中第一个可用连接
			con = (Connection) freeConnections.firstElement();
			freeConnections.removeElementAt(0);
			try {
				if (con.isClosed()) {
					log("从连接池" + name + "删除一个无效连接");
					System.out.println("从连接池" + name + "删除一个无效连接");
					// 递归调用自己,尝试再次获取可用连接
					con = getConnection();
				}
			} catch (SQLException e) {
				log("从连接池" + name + "删除一个无效连接时错误");
				System.out.println("从连接池" + name + "删除一个无效连接出错");
				// 递归调用自己,尝试再次获取可用连接
				con = getConnection();
			}
			if (freeConnections.size() > maxConn) {
				System.out.println(" 删除一个溢出连接 ");
				releaseOne();
			}
		}

		else if ((maxConn == 0) || (freeConnections.size() < maxConn)) {
			con = newConnection();
		}

		return con;
	}

	public synchronized Connection returnConnection() throws SQLException {
		Connection con = null;
		// 如果闲置小于最大连接,返回一个新连接
		if (freeConnections.size() < maxConn) {
			con = newConnection();
		}
		// 如果闲置大于最大连接，返回一个可用的旧连接
		else if (freeConnections.size() >= maxConn) {

			con = (Connection) freeConnections.firstElement();
			System.out.println(" [a 连接池可用连接数 ] : " + "[ " + freeConnections.size() + " ]");
			freeConnections.removeElementAt(0);
			System.out.println(" [b 连接池可用连接数 ] : " + "[ " + freeConnections.size() + " ]");
			try {
				if (con.isClosed()) {
					log("从连接池" + name + "删除一个无效连接");
					System.out.println("从连接池" + name + "删除一个无效连接");
					returnConnection();
				}
			} catch (SQLException e) {
				log("从连接池" + name + "删除一个无效连接时错误");
				System.out.println("从连接池" + name + "删除一个无效连接出错");
				returnConnection();
			}
		}
		return con;
	}

	/**
	 * 从连接池获取可用连接.可以指定客户程序能够等待的最长时间 参见前一个getConnection()方法.
	 * 
	 * @param timeout
	 *            以毫秒计的等待时间限制
	 * @throws SQLException 
	 */
	public synchronized Connection getConnection(long timeout) throws SQLException {
		long startTime = new Date().getTime();
		Connection con;
		while ((con = getConnection()) == null) {
			try {
				wait(timeout);
			} catch (InterruptedException e) {
			}
			if ((new Date().getTime() - startTime) >= timeout) {
				// wait()返回的原因是超时
				return null;
			}
		}
		return con;
	}

	/**
	 * 关闭所有连接
	 */
	public synchronized void release() {
		Enumeration allConnections = freeConnections.elements();
		while (allConnections.hasMoreElements()) {
			Connection con = (Connection) allConnections.nextElement();
			try {
				con.close();
				log("关闭连接池" + name + "中的一个连接");
			} catch (SQLException e) {
				log(e, "无法关闭连接池" + name + "中的连接");
			}
		}
		freeConnections.removeAllElements();
	}

	/**
	 * 关闭一个连接
	 */
	public synchronized void releaseOne() {
		if (freeConnections.firstElement() != null) {
			Connection con = (Connection) freeConnections.firstElement();
			try {
				con.close();
				System.out.println("关闭连接池" + name + "中的一个连接");
				log("关闭连接池" + name + "中的一个连接");
			} catch (SQLException e) {

				System.out.println("无法关闭连接池" + name + "中的一个连接");
				log(e, "无法关闭连接池" + name + "中的连接");
			}
		} else {
			System.out.println("releaseOne() bug.......................................................");

		}
	}

	/**
	 * 创建新的连接
	 * @throws SQLException 
	 */
	private Connection newConnection() throws SQLException {
		Connection con = null;
		try {
			if (user == null) {
				con = DriverManager.getConnection(URL);
			} else {
				con = DriverManager.getConnection(URL, user, password);
			}
			log("连接池" + name + "创建一个新的连接");

		} catch (SQLException e) {
			log(e, "无法创建下列URL的连接: " + URL);
			throw e;
		}
		return con;
	}
	
	/**
	 * 将文本信息写入日志文件
	 */
	private void log(String msg) {
		//log.println(new Date() + ": " + msg);
		Log4jUtil.getLogger().debug(msg);
	}

	/**
	 * 将文本信息与异常写入日志文件
	 */
	private void log(Throwable e, String msg) {
//		log.println(new Date() + ": " + msg);
//		e.printStackTrace(log);
		Log4jUtil.getLogger().debug(msg);
		Log4jUtil.getLogger().debug(MyUtil.Execption2String(e));
	}
}
